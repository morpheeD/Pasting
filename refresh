def extract_vms_and_tags(state: Dict[str, Any]) -> List[Dict[str, Any]]:
    """Extrait les VMs et les tags du state Terraform."""
    vms = []
    tags = {}

    # D'abord extraire toutes les ressources de type tag
    for resource in state.get('resources', []):
        if resource.get('type') == 'vsphere_tag':
            if resource.get('instances'):
                tag_attrs = resource['instances'][0]['attributes']
                tag_id = tag_attrs.get('id')
                if tag_id:
                    # Récupérer le nom de la catégorie à partir de l'ID de catégorie
                    category_id = tag_attrs.get('category_id', '')
                    category_name = category_id.split(':')[-2] if category_id else ''

                    tags[tag_id] = {
                        'name': tag_attrs.get('name', ''),
                        'category': category_name,  # Utiliser le nom extrait de l'ID
                        'description': tag_attrs.get('description', '')
                    }

    # Ensuite extraire les VMs et leurs associations de tags
    for resource in state.get('resources', []):
        if resource.get('type') == 'vsphere_virtual_machine':
            if not resource.get('instances'):
                continue

            attrs = resource['instances'][0]['attributes']
            vm_tags = {}

            # Extraire les associations de tags si elles existent
            if 'tags' in attrs:
                for tag_id in attrs['tags']:
                    if tag_id in tags:
                        tag = tags[tag_id]
                        # Mapper les tags aux colonnes spécifiques
                        if tag['category'] == 'workload':
                            vm_tags['workload'] = tag['name']
                        elif tag['category'] == 'env':
                            vm_tags['env'] = tag['name']
                            vm_tags['env_tag'] = tag['name']
                        elif tag['category'] == 'BackupPolicy':
                            vm_tags['backup_policy_tag'] = tag['name']
                        elif tag['category'] == 'confidentiality':
                            vm_tags['confidentiality_tag'] = tag['name']
                        elif tag['category'] == 'integrity':
                            vm_tags['integrity_tag'] = tag['name']
                        elif tag['category'] == 'availability':
                            vm_tags['availability_tag'] = tag['name']
                        elif tag['category'] == 'managedby':
                            vm_tags['managedby_tag'] = tag['name']
                        elif tag['category'] == 'business_service':
                            vm_tags['business_service_tag'] = tag['name']
                        elif tag['category'] == 'technical_service':
                            vm_tags['technical_service_tag'] = tag['name']
                        elif tag['category'] == 'component':
                            vm_tags['component_tag'] = tag['name']
                        elif tag['category'] == 'security_zone':
                            vm_tags['security_zone_tag'] = tag['name']
                        elif tag['category'] == 'owner':
                            vm_tags['owner_tag'] = tag['name']

            # Le reste de votre code pour les VMs reste inchangé
            # Initialisation des disques
            disk_info = {
                'disk_1_taille': '', 'disk_1_nom': '',
                'disk_2_taille': '', 'disk_2_nom': '',
                'disk_3_taille': '', 'disk_3_nom': ''
            }

            # Gestion des disques
            disks = attrs.get('disk', [])
            if disks and isinstance(disks, dict):
                disks = [disks]

            for i, disk in enumerate(disks[:3], 1):
                if isinstance(disk, dict):
                    disk_info[f'disk_{i}_taille'] = disk.get('size', '')
                    disk_info[f'disk_{i}_nom'] = disk.get('label', '')
                elif isinstance(disk, (list, tuple)) and len(disk) > 0:
                    disk_info[f'disk_{i}_taille'] = disk[0].get('size', '') if isinstance(disk[0], dict) else ''
                    disk_info[f'disk_{i}_nom'] = disk[0].get('label', '') if isinstance(disk[0], dict) else ''

            # Gestion des interfaces réseau
            network = ''
            network_interfaces = attrs.get('network_interface', [])
            if network_interfaces:
                if isinstance(network_interfaces, dict):
                    network_interfaces = [network_interfaces]
                if isinstance(network_interfaces, list) and len(network_interfaces) > 0:
                    first_if = network_interfaces[0]
                    if isinstance(first_if, dict):
                        network = first_if.get('network_id', '')

            # Conversion de la mémoire en Go
            memory_mb = attrs.get('memory', 0)
            try:
                memory_gb = int(memory_mb) // 1024
            except (ValueError, TypeError):
                memory_gb = 0

            # Construction de la VM avec les champs du header CSV
            vm = {
                'vm_name': attrs.get('name', ''),
                'num_cpus': attrs.get('num_cpus', ''),
                'workload': '',
                'env': '',
                'memory': memory_gb,  # Mémoire en Go
                'vm_dns': '',
                'vm_domain': attrs.get('domain', ''),
                'site': '',
                'usage': '',
                'appli': '',
                'network': network,
                'path_folder': attrs.get('folder', ''),
                'vm_ressource_pool': attrs.get('resource_pool_id', ''),
                'vm_template': '',
                **disk_info,
                'confidentiality_tag': '',
                'integrity_tag': '',
                'availability_tag': '',
                'backup_policy_tag': '',
                'managedby_tag': '',
                'business_service_tag': '',
                'technical_service_tag': '',
                'component_tag': '',
                'security_zone_tag': '',
                'owner_tag': '',
                'env_tag': ''
            }

            # Gestion du template
            clone = attrs.get('clone', {})
            if isinstance(clone, dict):
                vm['vm_template'] = clone.get('template_uuid', '')

            # Gestion des adresses IP
            ip_addresses = attrs.get('guest_ip_addresses', [])
            if ip_addresses and isinstance(ip_addresses, list) and len(ip_addresses) > 0:
                vm['vm_dns'] = ip_addresses[0]

            # Appliquer les tags extraits
            vm.update(vm_tags)
            vms.append(vm)

    return vms
