import pandas as pd
import json
from pathlib import Path
import click
from typing import List, Dict, Any

def load_csv_header(path: Path, sep: str = ";") -> List[str]:
    """Charge uniquement l'en-tête d'un fichier CSV."""
    with open(path, 'r', encoding='utf-8') as f:
        return f.readline().strip().split(sep)

def extract_terraform_resources(state: Dict[str, Any]) -> List[Dict[str, Any]]:
    """Extrait les ressources d'un state Terraform JSON."""
    resources = []

    # Vérifier la structure du state Terraform
    if 'resources' not in state:
        return resources

    for resource in state['resources']:
        if not resource['instances']:
            continue

        # Extraire les attributs de la première instance
        attrs = resource['instances'][0]['attributes']

        # Construire l'objet de ressource
        resource_data = {
            'type': resource['type'],
            'name': resource['name'],
            'module': resource.get('module', ''),
            **attrs
        }
        resources.append(resource_data)

    return resources

def build_dataframe_from_terraform(state_path: Path, csv_header: List[str]) -> pd.DataFrame:
    """Construit un DataFrame à partir d'un state Terraform en utilisant l'en-tête du CSV."""
    with open(state_path, 'r', encoding='utf-8') as f:
        state = json.load(f)

    resources = extract_terraform_resources(state)

    if not resources:
        return pd.DataFrame(columns=csv_header)

    # Créer le DataFrame avec les ressources
    df = pd.DataFrame(resources)

    # Filtrer et réorganiser selon l'en-tête CSV
    available_cols = [col for col in csv_header if col in df.columns]
    df = df[available_cols]

    # Ajouter les colonnes manquantes
    for col in csv_header:
        if col not in df.columns:
            df[col] = ''

    # Réorganiser selon l'ordre du CSV original
    df = df[csv_header]

    return df

@click.command()
@click.option('--csv-header', type=click.Path(exists=True, dir_okay=False, path_type=Path), required=True,
              help='Fichier CSV dont on veut conserver l\'en-tête')
@click.option('--terraform-state', type=click.Path(exists=True, dir_okay=False, path_type=Path), required=True,
              help='Fichier de state Terraform au format JSON')
@click.option('--output', type=click.Path(dir_okay=False, path_type=Path), default=Path('terraform_resources.csv'),
              help='Fichier CSV de sortie (défaut: terraform_resources.csv)')
@click.option('--sep', default=';', help='Séparateur CSV (défaut: ;)')
def main(csv_header: Path, terraform_state: Path, output: Path, sep: str):
    """Génère un CSV à partir d'un state Terraform en conservant l'en-tête du CSV."""
    try:
        click.echo("Chargement de l'en-tête du CSV...")
        header = load_csv_header(csv_header, sep)

        click.echo("Traitement du state Terraform...")
        df = build_dataframe_from_terraform(terraform_state, header)

        click.echo(f"Écriture du fichier de sortie {output}...")
        df.to_csv(output, sep=sep, index=False, encoding='utf-8')

        click.echo(f"✅ Fichier généré avec succès: {output}")
        click.echo(f"Nombre de ressources traitées: {len(df)}")
        click.echo(f"Colonnes incluses: {', '.join(header)}")

    except json.JSONDecodeError:
        click.echo("❌ Erreur: Le fichier de state Terraform n'est pas un JSON valide", err=True)
        raise click.Abort()
    except Exception as e:
        click.echo(f"❌ Erreur: {str(e)}", err=True)
        raise click.Abort()

if __name__ == "__main__":
    main()
